//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Limb"",
            ""id"": ""77dec4dd-cd8a-4a08-bf8e-4a5d4cc04009"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b28de439-8316-4974-8933-f3a50e1f4cb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BecomeStatue"",
                    ""type"": ""Button"",
                    ""id"": ""3c3f0d87-20ed-4fd2-8c4d-69d796b6209e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3fd46800-8462-419f-aa9d-770dd018f039"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6d8247ce-cc2d-4935-b6d1-5223846df58b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c00ebda-d5da-4838-aa3d-6cf87a786d34"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9da9bd37-d0c2-4f11-8590-b53521b69026"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8a54bb22-3c9a-4e4e-862c-185228881939"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5967f31d-d7b6-484c-89a7-f69bb9506876"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""81d76180-629c-4c2c-ae02-5a1634a1294d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""af3b3ee5-d999-4440-baf7-4ad95fa5b07f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""137e2c73-6bd5-4d42-9f5c-3f2a25633e65"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""200ec14b-efbf-4258-b67e-dce09b9ff03d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone,NormalizeVector2"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2873735-49eb-4e62-9167-afd136be5421"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ef001f7-7e7e-4f61-aecd-2ae8c2d5417d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BecomeStatue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Statue"",
            ""id"": ""2359410c-9c38-474a-8c65-05f1f9cbb65d"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""2772915a-0561-40c5-aa60-4b79328d5dab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BecomeLeftArm"",
                    ""type"": ""Button"",
                    ""id"": ""a948dd38-1c3a-4c58-80c3-de37afe32135"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BecomeRightArm"",
                    ""type"": ""Button"",
                    ""id"": ""f278ae5d-95fa-4e2c-b7bf-d4639826eef0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BecomeLeftLeg"",
                    ""type"": ""Button"",
                    ""id"": ""289a1f7b-353b-48ec-a018-e6a98625807a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BecomeRightLeg"",
                    ""type"": ""Button"",
                    ""id"": ""94546768-46dc-4e8b-b7be-41784f29da18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba6b83e3-2918-4992-8803-7d6d27c911cc"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8370efcb-4828-4f46-8775-c06fa4d95ef2"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BecomeLeftArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6df240f4-9d23-4948-a408-a5d0f2dd80cc"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BecomeRightArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e0d3d47-3ef2-441d-b458-d6e613fe1e51"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BecomeLeftLeg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6aad3be9-b371-4fb7-bc68-faee1de6de02"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BecomeRightLeg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Limb
        m_Limb = asset.FindActionMap("Limb", throwIfNotFound: true);
        m_Limb_Jump = m_Limb.FindAction("Jump", throwIfNotFound: true);
        m_Limb_BecomeStatue = m_Limb.FindAction("BecomeStatue", throwIfNotFound: true);
        m_Limb_Movement = m_Limb.FindAction("Movement", throwIfNotFound: true);
        m_Limb_Look = m_Limb.FindAction("Look", throwIfNotFound: true);
        // Statue
        m_Statue = asset.FindActionMap("Statue", throwIfNotFound: true);
        m_Statue_Look = m_Statue.FindAction("Look", throwIfNotFound: true);
        m_Statue_BecomeLeftArm = m_Statue.FindAction("BecomeLeftArm", throwIfNotFound: true);
        m_Statue_BecomeRightArm = m_Statue.FindAction("BecomeRightArm", throwIfNotFound: true);
        m_Statue_BecomeLeftLeg = m_Statue.FindAction("BecomeLeftLeg", throwIfNotFound: true);
        m_Statue_BecomeRightLeg = m_Statue.FindAction("BecomeRightLeg", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Limb
    private readonly InputActionMap m_Limb;
    private ILimbActions m_LimbActionsCallbackInterface;
    private readonly InputAction m_Limb_Jump;
    private readonly InputAction m_Limb_BecomeStatue;
    private readonly InputAction m_Limb_Movement;
    private readonly InputAction m_Limb_Look;
    public struct LimbActions
    {
        private @PlayerInputActions m_Wrapper;
        public LimbActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Limb_Jump;
        public InputAction @BecomeStatue => m_Wrapper.m_Limb_BecomeStatue;
        public InputAction @Movement => m_Wrapper.m_Limb_Movement;
        public InputAction @Look => m_Wrapper.m_Limb_Look;
        public InputActionMap Get() { return m_Wrapper.m_Limb; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LimbActions set) { return set.Get(); }
        public void SetCallbacks(ILimbActions instance)
        {
            if (m_Wrapper.m_LimbActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_LimbActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_LimbActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_LimbActionsCallbackInterface.OnJump;
                @BecomeStatue.started -= m_Wrapper.m_LimbActionsCallbackInterface.OnBecomeStatue;
                @BecomeStatue.performed -= m_Wrapper.m_LimbActionsCallbackInterface.OnBecomeStatue;
                @BecomeStatue.canceled -= m_Wrapper.m_LimbActionsCallbackInterface.OnBecomeStatue;
                @Movement.started -= m_Wrapper.m_LimbActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_LimbActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_LimbActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_LimbActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_LimbActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_LimbActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_LimbActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @BecomeStatue.started += instance.OnBecomeStatue;
                @BecomeStatue.performed += instance.OnBecomeStatue;
                @BecomeStatue.canceled += instance.OnBecomeStatue;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public LimbActions @Limb => new LimbActions(this);

    // Statue
    private readonly InputActionMap m_Statue;
    private IStatueActions m_StatueActionsCallbackInterface;
    private readonly InputAction m_Statue_Look;
    private readonly InputAction m_Statue_BecomeLeftArm;
    private readonly InputAction m_Statue_BecomeRightArm;
    private readonly InputAction m_Statue_BecomeLeftLeg;
    private readonly InputAction m_Statue_BecomeRightLeg;
    public struct StatueActions
    {
        private @PlayerInputActions m_Wrapper;
        public StatueActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Statue_Look;
        public InputAction @BecomeLeftArm => m_Wrapper.m_Statue_BecomeLeftArm;
        public InputAction @BecomeRightArm => m_Wrapper.m_Statue_BecomeRightArm;
        public InputAction @BecomeLeftLeg => m_Wrapper.m_Statue_BecomeLeftLeg;
        public InputAction @BecomeRightLeg => m_Wrapper.m_Statue_BecomeRightLeg;
        public InputActionMap Get() { return m_Wrapper.m_Statue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StatueActions set) { return set.Get(); }
        public void SetCallbacks(IStatueActions instance)
        {
            if (m_Wrapper.m_StatueActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_StatueActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_StatueActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_StatueActionsCallbackInterface.OnLook;
                @BecomeLeftArm.started -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeLeftArm;
                @BecomeLeftArm.performed -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeLeftArm;
                @BecomeLeftArm.canceled -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeLeftArm;
                @BecomeRightArm.started -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeRightArm;
                @BecomeRightArm.performed -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeRightArm;
                @BecomeRightArm.canceled -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeRightArm;
                @BecomeLeftLeg.started -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeLeftLeg;
                @BecomeLeftLeg.performed -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeLeftLeg;
                @BecomeLeftLeg.canceled -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeLeftLeg;
                @BecomeRightLeg.started -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeRightLeg;
                @BecomeRightLeg.performed -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeRightLeg;
                @BecomeRightLeg.canceled -= m_Wrapper.m_StatueActionsCallbackInterface.OnBecomeRightLeg;
            }
            m_Wrapper.m_StatueActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @BecomeLeftArm.started += instance.OnBecomeLeftArm;
                @BecomeLeftArm.performed += instance.OnBecomeLeftArm;
                @BecomeLeftArm.canceled += instance.OnBecomeLeftArm;
                @BecomeRightArm.started += instance.OnBecomeRightArm;
                @BecomeRightArm.performed += instance.OnBecomeRightArm;
                @BecomeRightArm.canceled += instance.OnBecomeRightArm;
                @BecomeLeftLeg.started += instance.OnBecomeLeftLeg;
                @BecomeLeftLeg.performed += instance.OnBecomeLeftLeg;
                @BecomeLeftLeg.canceled += instance.OnBecomeLeftLeg;
                @BecomeRightLeg.started += instance.OnBecomeRightLeg;
                @BecomeRightLeg.performed += instance.OnBecomeRightLeg;
                @BecomeRightLeg.canceled += instance.OnBecomeRightLeg;
            }
        }
    }
    public StatueActions @Statue => new StatueActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ILimbActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnBecomeStatue(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IStatueActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnBecomeLeftArm(InputAction.CallbackContext context);
        void OnBecomeRightArm(InputAction.CallbackContext context);
        void OnBecomeLeftLeg(InputAction.CallbackContext context);
        void OnBecomeRightLeg(InputAction.CallbackContext context);
    }
}
